var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HDF5","category":"page"},{"location":"#HDF5.jl","page":"Home","title":"HDF5.jl","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HDF5 stands for Hierarchical Data Format v5 and is closely modeled on file systems. In HDF5, a \"group\" is analogous to a directory, a \"dataset\" is like a file. HDF5 also uses \"attributes\" to associate metadata with a particular group or dataset. HDF5 uses ASCII names for these different objects, and objects can be accessed by UNIX-like pathnames, e.g., \"/sample1/tempsensor/firsttrial\" for a top-level group \"sample1\", a subgroup \"tempsensor\", and a dataset \"firsttrial\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"For simple types (scalars, strings, and arrays), HDF5 provides sufficient metadata to know how each item is to be interpreted. For example, HDF5 encodes that a given block of bytes is to be interpreted as an array of Int64, and represents them in a way that is compatible across different computing architectures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, to preserve Julia objects, one generally needs additional type information to be supplied, which is easy to provide using attributes. This is handled for you automatically in the JLD and MatIO modules for *.jld and *.mat files. These specific formats (conventions) provide \"extra\" functionality, but they are still both regular HDF5 files and are therefore compatible with any HDF5 reader or writer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Language wrappers for HDF5 are often described as either \"low level\" or \"high level.\" This package contains both flavors: at the low level, it directly wraps HDF5's functions, thus copying their API and making them available from within Julia. At the high level, it provides a set of functions built on the low-level wrap which may make the usage of this library more convenient.","category":"page"},{"location":"#Opening-and-closing-files","page":"Home","title":"Opening and closing files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\"Plain\" (i.e., with no extra formatting conventions) HDF5 files are created and/or opened with the h5open command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fid = h5open(filename, mode)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The mode can be any one of the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mode Meaning\n\"r\" read-only\n\"r+\" read-write, preserving any existing contents\n\"cw\" read-write, create file if not existing, preserve existing contents\n\"w\" read-write, destroying any existing contents (if any)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This produces an object of type HDF5File, a subtype of the abstract type DataFile. This file will have no elements (groups, datasets, or attributes) that are not explicitly created by the user.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you're finished with a file, you should close it:","category":"page"},{"location":"","page":"Home","title":"Home","text":"close(fid)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Closing a file also closes any other open objects (e.g., datasets, groups) in that file. In general, you need to close an HDF5 file to \"release\" it for use by other applications.","category":"page"},{"location":"#Opening-and-closing-objects","page":"Home","title":"Opening and closing objects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have a file object fid, and this has a group or dataset called \"myobject\" at the top level of a file, you can open it in the following way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"obj = fid[\"myobject\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"This does not read any data or attributes associated with the object, it's simply a handle for further manipulations. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"g = fid[\"mygroup\"]\ndset = g[\"mydataset\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"or simply","category":"page"},{"location":"","page":"Home","title":"Home","text":"dset = fid[\"mygroup/mydataset\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you're done with an object, you can close it using close(obj). If you forget to do this, it will be closed for you anyway when the file is closed, or if obj goes out of scope and gets garbage collected.","category":"page"},{"location":"#Reading-and-writing-data","page":"Home","title":"Reading and writing data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Suppose you have a group g which contains a dataset with path \"mydataset\", and that you've also opened this dataset as dset = g[\"mydataset\"]. You can read information in this dataset in any of the following ways:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = read(dset)\nA = read(g, \"mydataset\")\nAsub = dset[2:3, 1:3]","category":"page"},{"location":"","page":"Home","title":"Home","text":"The last syntax reads just a subset of the data array (assuming that dset is an array of sufficient size). libhdf5 has internal mechanisms for slicing arrays, and consequently if you need only a small piece of a large array, it can be faster to read just what you need rather than reading the entire array and discarding most of it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Datasets can be created with either","category":"page"},{"location":"","page":"Home","title":"Home","text":"g[\"mydataset\"] = rand(3,5)\nwrite(g, \"mydataset\", rand(3,5))","category":"page"},{"location":"#Passing-parameters","page":"Home","title":"Passing parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It is often required to pass parameters to specific routines, which are collected in so-called property lists in HDF5. There are different property lists for different tasks, e.g. for the access/creation of files, datasets, groups. In this high level framework multiple parameters can be simply applied by appending them at the end of function calls as a list of key/value pairs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"g[\"A\"] = A  # basic\ng[\"A\", \"chunk\", (5,5)] = A # add chunks\n\nB=h5read(fn,\"mygroup/B\", # two parameters\n  \"fapl_mpio\", (ccomm,cinfo), # if parameter requires multiple args use tuples\n  \"dxpl_mpio\", HDF5.H5FD_MPIO_COLLECTIVE )","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will automatically create the correct property lists, add the properties, and apply the property list while reading/writing the data. The naming of the properties generally follows that of HDF5, i.e. the key fapl_mpio returns the HDF5 functions h5pget/set_fapl_mpio and their corresponding property list type H5P_FILE_ACCESS. The complete list if routines and their interfaces is available at the H5P: Property List Interface documentation. Note that not all properties are available. When searching for a property check whether the corresponding h5pget/set functions are available.","category":"page"},{"location":"#Chunking-and-compression","page":"Home","title":"Chunking and compression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can also optionally \"chunk\" and/or compress your data. For example,","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = rand(100,100)\ng[\"A\", \"chunk\", (5,5)] = A","category":"page"},{"location":"","page":"Home","title":"Home","text":"stores the matrix A in 5-by-5 chunks. Chunking improves efficiency if you write or extract small segments or slices of an array, if these are not stored contiguously.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A = rand(100,100)\ng1[\"A\", \"chunk\", (5,5), \"compress\", 3] = A\ng2[\"A\", \"chunk\", (5,5), \"shuffle\", (), \"deflate\", 3] = A\ng3[\"A\", \"chunk\", (5,5), \"blosc\", 3] = A","category":"page"},{"location":"","page":"Home","title":"Home","text":"Standard compression in HDF5 (\"compress\") corresponds to (\"deflate\") and uses the deflate/zlib algorithm. The deflate algorithm is often more efficient if prefixed by a \"shuffle\" filter. Blosc is generally much faster than deflate â€“ however, reading Blosc-compressed HDF5 files require Blosc to be installed. This is the case for Julia, but often not for vanilla HDF5 distributions that may be used outside Julia. (In this case, the structure of the HDF5 file is still accessible, but compressed datasets cannot be read.) Compression requires chunking, and heuristic chunking is automatically used if you specify compression but don't specify chunking.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is also possible to write to subsets of an on-disk HDF5 dataset. This is useful to incrementally save to very large datasets you don't want to keep in memory. For example,","category":"page"},{"location":"","page":"Home","title":"Home","text":"dset = d_create(g, \"B\", datatype(Float64), dataspace(1000,100,10), \"chunk\", (100,100,1))\ndset[:,1,1] = rand(1000)","category":"page"},{"location":"","page":"Home","title":"Home","text":"creates a Float64 dataset in the file or group g, with dimensions 1000x100x10, and then writes to just the first 1000 element slice. If you know the typical size of subset reasons you'll be reading/writing, it can be beneficial to set the chunk dimensions appropriately.","category":"page"},{"location":"","page":"Home","title":"Home","text":"More fine-grained control is also available.","category":"page"},{"location":"#Memory-mapping","page":"Home","title":"Memory mapping","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you will frequently be accessing individual elements or small regions of array datasets, it can be substantially more efficient to bypass HDF5 routines and use direct memory mapping. This is possible only under particular conditions: when the dataset is an array of standard \"bits\" types (e.g., Float64 or Int32) and no chunking/compression is being used. You can use the ismmappable function to test whether this is possible; for example,","category":"page"},{"location":"","page":"Home","title":"Home","text":"dset = g[\"x\"]\nif ismmappable(dset)\n    dset = readmmap(dset)\nend\nval = dset[15]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that readmmap returns an Array rather than an HDF5 object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: if you use readmmap on a dataset and subsequently close the file, the array data are still availableâ€“-and file continues to be in useâ€“-until all of the arrays are garbage-collected. This is in contrast to standard HDF5 datasets, where closing the file prevents further access to any of the datasets, but the file is also detached and can safely be rewritten immediately.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Under the default allocation-time policy, a newly added ismmappable dataset can only be memory mapped after it has been written to. The following fails:","category":"page"},{"location":"","page":"Home","title":"Home","text":"vec_dset = d_create(g, \"v\", datatype(Float64), dataspace(10_000,1))\nismmappable(vec_dset)    # == true\nvec = readmmap(vec_dset) # throws ErrorException(\"Error mmapping array\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"because although the dataset description has been added, the space within the HDF5 file has not yet actually been allocated (so the file region cannot be memory mapped by the OS). The storage can be allocated by making at least one write:","category":"page"},{"location":"","page":"Home","title":"Home","text":"vec_dset[1,1] = 0.0      # force allocation of /g/v within the file\nvec = readmmap(vec_dset) # and now the memory mapping can succeed","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatlively, the policy can be set so that the space is allocated immediately upon creation of the data set with the alloc_time property key-value pair:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mtx_dset = d_create(g, \"M\", datatype(Float64), dataspace(100, 1000),\n                    \"alloc_time\", HDF5.H5D_ALLOC_TIME_EARLY)\nmtx = readmmap(mtx_dset) # succeeds immediately","category":"page"},{"location":"#Supported-data-types","page":"Home","title":"Supported data types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HDF5.jl knows how to store values of the following types: signed and unsigned integers of 8, 16, 32, and 64 bits, Float32, Float64; Complex versions of these numeric types; Arrays of these numeric types (including complex versions); ASCIIString and UTF8String; and Arrays of these two string types. Arrays of strings are supported using HDF5's variable-length-strings facility. By default Complex numbers are stored as compound types with r and i fields following the h5py convention. When reading data, compound types with matching field names will be loaded as the corresponding Complex julia type. These field names are configurable with the HDF5.set_complex_field_names(real::AbstractString, imag::AbstractString) function and complex support can be completely enabled/disabled with HDF5.enable/disable_complex_support().","category":"page"},{"location":"","page":"Home","title":"Home","text":"This module also supports HDF5's VLEN, OPAQUE, and REFERENCE types, which can be used to encode more complex types. In general, you need to specify how you want to combine these more advanced facilities to represent more complex data types. For many of the data types in Julia, the JLD module implements support. You can likewise define your own file format if, for example, you need to interact with some external program that has explicit formatting requirements.","category":"page"},{"location":"#Creating-groups-and-attributes","page":"Home","title":"Creating groups and attributes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create a new group in the following way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"g = g_create(parent, name)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The named group will be created as a child of the parent.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Attributes can be created using","category":"page"},{"location":"","page":"Home","title":"Home","text":"attrs(parent)[name] = value","category":"page"},{"location":"","page":"Home","title":"Home","text":"where attrs simply indicates that the object referenced by name (a string) is an attribute, not another group or dataset. (Datasets cannot have child datasets, but groups can have either.) value must be a simple type: BitsKinds, strings, and arrays of either of these. The HDF5 standard recommends against storing large objects as attributes.","category":"page"},{"location":"#Getting-information","page":"Home","title":"Getting information","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"name(obj)","category":"page"},{"location":"","page":"Home","title":"Home","text":"will return the full HDF5 pathname of object obj.","category":"page"},{"location":"","page":"Home","title":"Home","text":"names(g)","category":"page"},{"location":"","page":"Home","title":"Home","text":"returns a string array containing all objects inside group g. These relative pathnames, not absolute pathnames.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can iterate over the objects in a group, i.e.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"for obj in g\n  data = read(obj)\n  println(data)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This gives you a straightforward way of recursively exploring an entire HDF5 file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you need to know whether group g has a dataset named mydata, you can test that with","category":"page"},{"location":"","page":"Home","title":"Home","text":"if exists(g, \"mydata\")\n   ...\nend\ntf = has(g, \"mydata\")  # synonym for \"exists\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"If instead you want to know whether g has an attribute named myattribute, do it this way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"tf = exists(attrs(g), \"myattribute\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have an HDF5 object, and you want to know where it fits in the hierarchy of the file, the following can be useful:","category":"page"},{"location":"","page":"Home","title":"Home","text":"p = parent(obj)     # p is the parent object (usually a group)\nfn = filename(obj)  # fn is a string\ng = root(obj)       # g is the group \"/\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"For array objects (datasets and attributes) the following methods work:","category":"page"},{"location":"","page":"Home","title":"Home","text":"dims = size(dset)\nnd = ndims(dset)\nlen = length(dset)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Objects can be created with properties, and you can query those properties in the following way:","category":"page"},{"location":"","page":"Home","title":"Home","text":"p = get_create_properties(dset)\nchunksz = get_chunk(p)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The simpler syntax chunksz = get_chunk(dset) is also available.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, sometimes you need to be able to conveniently test whether a file is an HDF5 file:","category":"page"},{"location":"","page":"Home","title":"Home","text":"tf = ishdf5(filename)","category":"page"},{"location":"#Mid-level-routines","page":"Home","title":"Mid-level routines","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sometimes you might want more fine-grained control, which can be achieved using a different set of routines. For example,","category":"page"},{"location":"","page":"Home","title":"Home","text":"g = g_open(parent, name)\ndset = d_open(parent, name[, apl])\nattr = a_open(parent, name)\nt = t_open(parent, name)","category":"page"},{"location":"","page":"Home","title":"Home","text":"These open the named group, dataset, attribute, and committed datatype, respectively. For datasets, apl stands for \"access parameter list\" and provides opportunities for more sophisticated control (see the HDF5 documentation).","category":"page"},{"location":"","page":"Home","title":"Home","text":"New objects can be created in the following ways:","category":"page"},{"location":"","page":"Home","title":"Home","text":"g = g_create(parent, name[, lcpl, dcpl])\ndset = d_create(parent, name, data[, lcpl, dcpl, dapl])\nattr = a_create(parent, name, data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"creates groups, datasets, and attributes without writing any data to them. You can then use write(obj, data) to store the data. The optional property lists allow even more fine-grained control. This syntax uses data to infer the object's \"datatype\" and \"dataspace\"; for the most explicit control, data can be replaced with dtype, dspace, where dtype is an HDF5Datatype and dspace is an HDF5Dataspace.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Analogously, to create committed data types, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"t = t_commit(parent, name, dtype[, lcpl, tcpl, tapl])","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can create and write data in one step,","category":"page"},{"location":"","page":"Home","title":"Home","text":"d_write(parent, name, data[, lcpl, dcpl, dapl])\na_write(parent, name, data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use extendible dimensions,","category":"page"},{"location":"","page":"Home","title":"Home","text":"d = d_create(parent, name, dtype, (dims, max_dims), \"chunk\", (chunk_dims), [lcpl, dcpl, dapl])\nset_dims!(d, new_dims)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where dims is a tuple of integers.  For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"b = d_create(fid, \"b\", Int, ((1000,),(-1,)), \"chunk\", (100,)) #-1 is equivalent to typemax(Hsize)\nset_dims!(b, (10000,))\nb[1:10000] = collect(1:10000)","category":"page"},{"location":"","page":"Home","title":"Home","text":"when dimensions are reduced, the truncated data is lost.  A maximum dimension of -1 is often referred to as unlimited dimensions, though it is limited by the maximum size of an unsigned integer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, it's possible to delete objects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"o_delete(parent, name)   # for groups, datasets, and datatypes\na_delete(parent, name)   # for attributes","category":"page"},{"location":"#Low-level-routines","page":"Home","title":"Low-level routines","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Many of the most commonly-used libhdf5 functions have been wrapped. These are not exported, so you need to preface them with HDF5.function to use them. The library follows a consistent convention: for example, libhdf5's H5Adelete is wrapped with a Julia function called h5a_delete. The arguments are exactly as specified in the HDF5 reference manual.","category":"page"},{"location":"","page":"Home","title":"Home","text":"HDF5 is a large library, and the low-level wrap is not complete. However, many of the most-commonly used functions are wrapped, and in general wrapping a new function takes only a single line of code. Users who need additional functionality are encourage to contribute it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that Julia's HDF5 directly uses the \"2\" interfaces, e.g., H5Dcreate2, so you need to have version 1.8 of the HDF5 library or later.","category":"page"},{"location":"#Details","page":"Home","title":"Details","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia, like Fortran and Matlab, stores arrays in column-major order. HDF5 uses C's row-major order, and consequently every array's dimensions are inverted compared to what you see with tools like h5dump. This is the same convention as for the Fortran and Matlab HDF5 interfaces. The advantage is that no data rearrangement takes place when reading or writing.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below we include a limited number of API references. Note not all of these are public interfaces, thus proceed with caution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HDF5]","category":"page"},{"location":"#Base.isopen-Tuple{HDF5File}","page":"Home","title":"Base.isopen","text":"isopen(obj::HDF5File)\n\nReturns true if obj has not been closed, false if it has been closed.\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.create_external-Tuple{Union{HDF5File, HDF5Group},Any,Any,Any}","page":"Home","title":"HDF5.create_external","text":"create_external(source::Union{HDF5File, HDF5Group}, source_relpath, target_filename, target_path;\n                lcpl_id=HDF5.H5P_DEFAULT, lapl_id=HDF5.H5P.DEFAULT)\n\nCreate an external link such that source[source_relpath] points to target_path within the file with path target_filename; Calls [H5Lcreate_external](https://www.hdfgroup.org/HDF5/doc/RM/RM_H5L.html#Link-CreateExternal).\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.get_datasets-Tuple{HDF5File}","page":"Home","title":"HDF5.get_datasets","text":"get_datasets(file::HDF5File) -> datasets::Vector{HDF5Dataset}\n\nGet all the datasets in an hdf5 file without loading the data.\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.get_dims-Tuple{HDF5Dataset}","page":"Home","title":"HDF5.get_dims","text":"get_dims(dset::HDF5Dataset)\n\nGet the array dimensions from a dataset and return a tuple of dims and maxdims.\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.h5open","page":"Home","title":"HDF5.h5open","text":"h5open(filename::AbstractString, mode::AbstractString=\"r\"; swmr=false)\n\nOpen or create an HDF5 file where mode is one of:\n\n\"r\"  read only\n\"r+\" read and write\n\"cw\" read and write, create file if not existing, do not truncate\n\"w\"  read and write, create a new file (destroys any existing contents)\n\nPass swmr=true to enable (Single Writer Multiple Reader) SWMR write access for \"w\" and \"r+\", or SWMR read access for \"r\".\n\n\n\n\n\n","category":"function"},{"location":"#HDF5.h5open-Tuple{Function,Vararg{Any,N} where N}","page":"Home","title":"HDF5.h5open","text":"function h5open(f::Function, args...; swmr=false)\n\nApply the function f to the result of h5open(args...;kwargs...) and close the resulting HDF5File upon completion. For example with a do block:\n\nh5open(\"foo.h5\",\"w\") do h5\n    h5[\"foo\"]=[1,2,3]\nend\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.ishdf5-Tuple{AbstractString}","page":"Home","title":"HDF5.ishdf5","text":"ishdf5(name::AbstractString)\n\nReturns true if name is a path to a valid hdf5 file, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.set_dims!-Tuple{HDF5Dataset,Tuple{Vararg{Int64,N}} where N}","page":"Home","title":"HDF5.set_dims!","text":"set_dims!(dset::HDF5Dataset, new_dims::Dims)\n\nChange the current dimensions of a dataset to new_dims, limited by max_dims = get_dims(dset)[2]. Reduction is possible and leads to loss of truncated data.\n\n\n\n\n\n","category":"method"},{"location":"#HDF5.start_swmr_write-Tuple{HDF5File}","page":"Home","title":"HDF5.start_swmr_write","text":"start_swmr_write(h5::HDF5File)\n\nStart Single Reader Multiple Writer (SWMR) writing mode. See SWMR documentation.\n\n\n\n\n\n","category":"method"}]
}
